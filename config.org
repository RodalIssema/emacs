* Edit/reload function
** Edit
#+begin_src emacs-lisp
  (defun edit-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'edit-config)
#+end_src

** Reload
#+begin_src emacs-lisp
  (defun reload-config ()
    (interactive)
    (org-babel-load-file (expand-file-name  "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'reload-config)
#+end_src
* Editing text
** Killing whole words
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src
** Hungry delete
#+begin_src emacs-lisp
  (use-package hungry-delete ;;change backspace to deletes multiple empty space by default
    :ensure
    :config (global-hungry-delete-mode))
#+end_src
** Copy whole line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+end_src
* Terminal
** Change default shell to bash
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/zsh") ;; using bash and ansi-term for terminal
  (defadvice ansi-term (before force-zsh)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+end_src

* Disable
** Removing things from basic emacs
#+begin_src emacs-lisp
  (tool-bar-mode -1);;no tool bar
  (menu-bar-mode -1);; no menu bar
  (scroll-bar-mode -1);; no scroll bar
  (setq inhibit-startup-message t) ;;inhibiting ugly emacs theme first booting into
#+end_src

* Minor
** Basic changes to make things a little nicer
#+begin_src emacs-lisp
  (setq make-backup-file nil);; no backup files

  (setq auto-save-default nil) ;; no autosaves

  (defalias 'yes-or-no-p 'y-or-n-p) ;; changing "yes or no" responses to "y or n"

  (global-set-key (kbd "<s-return>") 'ansi-term);; key bind to call terminal

  (setq scroll-conservatively 100)

  (when window-system (global-hl-line-mode t)) ;;to easily find cursor (only in gui)

  (when window-system (global-prettify-symbols-mode t)) ;;for symbols to print (only in gui)

  (setq electric-pair-pairs '( ;;pair parentheses and brackets
			       (?\( . ?\))
			       (?\[ . ?\])
			       ))
  (electric-pair-mode t)

  (use-package rainbow-mode ;;color-codes parentheses to easily identify them
    :ensure t
    :init (rainbow-mode 1))
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))

  (setq display-time-24hr-format t) ;;show timer
  (display-time-mode 1)
#+end_src

** Show lines and columns of modeline
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
* Packages
** Install packages
#+begin_src emacs-lisp
  (use-package which-key ;; to help with shortcuts
    :ensure t
    :init
    (which-key-mode)) ;;

  (use-package beacon ;; indicates where curser is  when first opening file
    :ensure t
    :init
    (beacon-mode 1))
#+end_src
* Org
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
** basic config
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window);; change language edit window to current window
#+end_src
* IDO
** enable ido mode (for navigation)
#+begin_src emacs-lisp
  (setq ido-enable-felx-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)

  (use-package ido-vertical-mode ;;adding vertical version (looks better)
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)

  (use-package smex ;;ido like mode for M-x
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))

  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer) ;; change switch buffer to ido for better navigation
#+end_src
* Buffers
** ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer) ;;enable ibuffer and set C-x b
  (setq ibuffer-expert t) ;;removes question prompt before delete buffers
#+end_src

** kill current buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src
* avy
** fast navigation for searching
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

* Switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("1" "2" "3" "4" "5" "6" "7" "8" "9" "0"))
    :bind
    ([remap other-window] . switch-window))
  
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config 
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Hello, Rodal!"))
#+end_src

* Auto completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
